'use strict';

var _powerAssertVisitorKeys = '{"ArrayExpression":["elements"],"AssignmentExpression":["left","right"],"BinaryExpression":["left","right"],"Directive":["value"],"DirectiveLiteral":[],"BlockStatement":["directives","body"],"BreakStatement":["label"],"CallExpression":["callee","arguments"],"CatchClause":["param","body"],"ConditionalExpression":["test","consequent","alternate"],"ContinueStatement":["label"],"DebuggerStatement":[],"DoWhileStatement":["test","body"],"EmptyStatement":[],"ExpressionStatement":["expression"],"File":["program"],"ForInStatement":["left","right","body"],"ForStatement":["init","test","update","body"],"FunctionDeclaration":["id","params","body","returnType","typeParameters"],"FunctionExpression":["id","params","body","returnType","typeParameters"],"Identifier":["typeAnnotation"],"IfStatement":["test","consequent","alternate"],"LabeledStatement":["label","body"],"StringLiteral":[],"NumericLiteral":[],"NullLiteral":[],"BooleanLiteral":[],"RegExpLiteral":[],"LogicalExpression":["left","right"],"MemberExpression":["object","property"],"NewExpression":["callee","arguments"],"Program":["directives","body"],"ObjectExpression":["properties"],"ObjectMethod":["key","params","body","decorators","returnType","typeParameters"],"ObjectProperty":["key","value","decorators"],"RestElement":["argument","typeAnnotation"],"ReturnStatement":["argument"],"SequenceExpression":["expressions"],"SwitchCase":["test","consequent"],"SwitchStatement":["discriminant","cases"],"ThisExpression":[],"ThrowStatement":["argument"],"TryStatement":["block","handler","finalizer"],"UnaryExpression":["argument"],"UpdateExpression":["argument"],"VariableDeclaration":["declarations"],"VariableDeclarator":["id","init"],"WhileStatement":["test","body"],"WithStatement":["object","body"],"AssignmentPattern":["left","right"],"ArrayPattern":["elements","typeAnnotation"],"ArrowFunctionExpression":["params","body","returnType","typeParameters"],"ClassBody":["body"],"ClassDeclaration":["id","body","superClass","mixins","typeParameters","superTypeParameters","implements","decorators"],"ClassExpression":["id","body","superClass","mixins","typeParameters","superTypeParameters","implements","decorators"],"ExportAllDeclaration":["source"],"ExportDefaultDeclaration":["declaration"],"ExportNamedDeclaration":["declaration","specifiers","source"],"ExportSpecifier":["local","exported"],"ForOfStatement":["left","right","body"],"ImportDeclaration":["specifiers","source"],"ImportDefaultSpecifier":["local"],"ImportNamespaceSpecifier":["local"],"ImportSpecifier":["local","imported"],"MetaProperty":["meta","property"],"ClassMethod":["key","params","body","decorators","returnType","typeParameters"],"ObjectPattern":["properties","typeAnnotation"],"SpreadElement":["argument"],"Super":[],"TaggedTemplateExpression":["tag","quasi"],"TemplateElement":[],"TemplateLiteral":["quasis","expressions"],"YieldExpression":["argument"],"AnyTypeAnnotation":[],"ArrayTypeAnnotation":["elementType"],"BooleanTypeAnnotation":[],"BooleanLiteralTypeAnnotation":[],"NullLiteralTypeAnnotation":[],"ClassImplements":["id","typeParameters"],"ClassProperty":["key","value","typeAnnotation","decorators"],"DeclareClass":["id","typeParameters","extends","body"],"DeclareFunction":["id"],"DeclareInterface":["id","typeParameters","extends","body"],"DeclareModule":["id","body"],"DeclareModuleExports":["typeAnnotation"],"DeclareTypeAlias":["id","typeParameters","right"],"DeclareVariable":["id"],"ExistentialTypeParam":[],"FunctionTypeAnnotation":["typeParameters","params","rest","returnType"],"FunctionTypeParam":["name","typeAnnotation"],"GenericTypeAnnotation":["id","typeParameters"],"InterfaceExtends":["id","typeParameters"],"InterfaceDeclaration":["id","typeParameters","extends","body"],"IntersectionTypeAnnotation":["types"],"MixedTypeAnnotation":[],"EmptyTypeAnnotation":[],"NullableTypeAnnotation":["typeAnnotation"],"NumericLiteralTypeAnnotation":[],"NumberTypeAnnotation":[],"StringLiteralTypeAnnotation":[],"StringTypeAnnotation":[],"ThisTypeAnnotation":[],"TupleTypeAnnotation":["types"],"TypeofTypeAnnotation":["argument"],"TypeAlias":["id","typeParameters","right"],"TypeAnnotation":["typeAnnotation"],"TypeCastExpression":["expression","typeAnnotation"],"TypeParameter":["bound"],"TypeParameterDeclaration":["params"],"TypeParameterInstantiation":["params"],"ObjectTypeAnnotation":["properties","indexers","callProperties"],"ObjectTypeCallProperty":["value"],"ObjectTypeIndexer":["id","key","value"],"ObjectTypeProperty":["key","value"],"QualifiedTypeIdentifier":["id","qualification"],"UnionTypeAnnotation":["types"],"VoidTypeAnnotation":[],"JSXAttribute":["name","value"],"JSXClosingElement":["name"],"JSXElement":["openingElement","children","closingElement"],"JSXEmptyExpression":[],"JSXExpressionContainer":["expression"],"JSXSpreadChild":["expression"],"JSXIdentifier":[],"JSXMemberExpression":["object","property"],"JSXNamespacedName":["namespace","name"],"JSXOpeningElement":["name","attributes"],"JSXSpreadAttribute":["argument"],"JSXText":[],"Noop":[],"ParenthesizedExpression":["expression"],"AwaitExpression":["argument"],"ForAwaitStatement":["left","right","body"],"BindExpression":["object","callee"],"Import":[],"Decorator":["expression"],"DoExpression":["body"],"ExportDefaultSpecifier":["exported"],"ExportNamespaceSpecifier":["exported"],"RestProperty":["argument"],"SpreadProperty":["argument"]}',
    _powerAssertRecorder = function () { function PowerAssertRecorder() { this.captured = []; } PowerAssertRecorder.prototype._capt = function _capt(value, espath) { this.captured.push({ value: value, espath: espath }); return value; }; PowerAssertRecorder.prototype._expr = function _expr(value, source) { var capturedValues = this.captured; this.captured = []; return { powerAssertContext: { value: value, events: capturedValues }, source: source }; }; return PowerAssertRecorder; }();

var _ava = require('ava');

var _ava2 = _interopRequireDefault(_ava);

var _main = require('../lib/main');

var _main2 = _interopRequireDefault(_main);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _avaThrowsHelper(fn, data) {
  try {
    return fn();
  } catch (e) {
    var type = typeof e;

    if (e !== null && (type === "object" || type === "function")) {
      try {
        Object.defineProperty(e, "_avaThrowsHelperData", {
          value: data
        });
      } catch (e) {}
    }

    throw e;
  }
}

class Term {
  constructor(value) {
    this.value = value;
  }
}

class Div {
  constructor(term1, term2) {
    this.term1 = term1;
    this.term2 = term2;
  }
}

(0, _ava2.default)('basic evaluation', t => {
  var _rec = new _powerAssertRecorder(),
      _rec2 = new _powerAssertRecorder(),
      _rec3 = new _powerAssertRecorder(),
      _rec4 = new _powerAssertRecorder(),
      _rec5 = new _powerAssertRecorder(),
      _rec6 = new _powerAssertRecorder();

  const evaluate = val => {
    if (val.constructor !== Term) throw new Error('Unexpected argument');

    if (val.value.constructor === Number) return _main2.default.unit(val.value);

    if (val.value.constructor === Div) {
      return evaluate(val.value.term1).then(a => evaluate(val.value.term2).then(b => _main2.default.unit(a / b)));
    }
  };

  const consResult = evaluate(new Term(42));
  t.is(_rec._expr(_rec._capt(_rec._capt(consResult, 'arguments/0/object').constructor, 'arguments/0'), {
    content: 't.is(consResult.constructor, Monad)',
    filepath: 'test/main.js',
    line: 34,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"is","range":[2,4]},"computed":false,"range":[0,4]},"arguments":[{"type":"MemberExpression","object":{"type":"Identifier","name":"consResult","range":[5,15]},"property":{"type":"Identifier","name":"constructor","range":[16,27]},"computed":false,"range":[5,27]},{"type":"Identifier","name":"Monad","range":[29,34]}],"range":[0,35]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"name"},"value":"is","range":[2,4]},{"type":{"label":"("},"range":[4,5]},{"type":{"label":"name"},"value":"consResult","range":[5,15]},{"type":{"label":"."},"range":[15,16]},{"type":{"label":"name"},"value":"constructor","range":[16,27]},{"type":{"label":","},"range":[27,28]},{"type":{"label":"name"},"value":"Monad","range":[29,34]},{"type":{"label":")"},"range":[34,35]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), _rec2._expr(_rec2._capt(_main2.default, 'arguments/1'), {
    content: 't.is(consResult.constructor, Monad)',
    filepath: 'test/main.js',
    line: 34,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"is","range":[2,4]},"computed":false,"range":[0,4]},"arguments":[{"type":"MemberExpression","object":{"type":"Identifier","name":"consResult","range":[5,15]},"property":{"type":"Identifier","name":"constructor","range":[16,27]},"computed":false,"range":[5,27]},{"type":"Identifier","name":"Monad","range":[29,34]}],"range":[0,35]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"name"},"value":"is","range":[2,4]},{"type":{"label":"("},"range":[4,5]},{"type":{"label":"name"},"value":"consResult","range":[5,15]},{"type":{"label":"."},"range":[15,16]},{"type":{"label":"name"},"value":"constructor","range":[16,27]},{"type":{"label":","},"range":[27,28]},{"type":{"label":"name"},"value":"Monad","range":[29,34]},{"type":{"label":")"},"range":[34,35]}]',
    visitorKeys: _powerAssertVisitorKeys
  }));
  t.is(_rec3._expr(_rec3._capt(_rec3._capt(consResult, 'arguments/0/object').value, 'arguments/0'), {
    content: 't.is(consResult.value, 42)',
    filepath: 'test/main.js',
    line: 35,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"is","range":[2,4]},"computed":false,"range":[0,4]},"arguments":[{"type":"MemberExpression","object":{"type":"Identifier","name":"consResult","range":[5,15]},"property":{"type":"Identifier","name":"value","range":[16,21]},"computed":false,"range":[5,21]},{"type":"NumericLiteral","value":42,"range":[23,25]}],"range":[0,26]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"name"},"value":"is","range":[2,4]},{"type":{"label":"("},"range":[4,5]},{"type":{"label":"name"},"value":"consResult","range":[5,15]},{"type":{"label":"."},"range":[15,16]},{"type":{"label":"name"},"value":"value","range":[16,21]},{"type":{"label":","},"range":[21,22]},{"type":{"label":"num"},"value":42,"range":[23,25]},{"type":{"label":")"},"range":[25,26]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), 42);

  const divResult = evaluate(new Term(new Div(new Term(new Div(new Term(1972), new Term(2))), new Term(23))));
  t.is(_rec4._expr(_rec4._capt(_rec4._capt(consResult, 'arguments/0/object').constructor, 'arguments/0'), {
    content: 't.is(consResult.constructor, Monad)',
    filepath: 'test/main.js',
    line: 38,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"is","range":[2,4]},"computed":false,"range":[0,4]},"arguments":[{"type":"MemberExpression","object":{"type":"Identifier","name":"consResult","range":[5,15]},"property":{"type":"Identifier","name":"constructor","range":[16,27]},"computed":false,"range":[5,27]},{"type":"Identifier","name":"Monad","range":[29,34]}],"range":[0,35]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"name"},"value":"is","range":[2,4]},{"type":{"label":"("},"range":[4,5]},{"type":{"label":"name"},"value":"consResult","range":[5,15]},{"type":{"label":"."},"range":[15,16]},{"type":{"label":"name"},"value":"constructor","range":[16,27]},{"type":{"label":","},"range":[27,28]},{"type":{"label":"name"},"value":"Monad","range":[29,34]},{"type":{"label":")"},"range":[34,35]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), _rec5._expr(_rec5._capt(_main2.default, 'arguments/1'), {
    content: 't.is(consResult.constructor, Monad)',
    filepath: 'test/main.js',
    line: 38,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"is","range":[2,4]},"computed":false,"range":[0,4]},"arguments":[{"type":"MemberExpression","object":{"type":"Identifier","name":"consResult","range":[5,15]},"property":{"type":"Identifier","name":"constructor","range":[16,27]},"computed":false,"range":[5,27]},{"type":"Identifier","name":"Monad","range":[29,34]}],"range":[0,35]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"name"},"value":"is","range":[2,4]},{"type":{"label":"("},"range":[4,5]},{"type":{"label":"name"},"value":"consResult","range":[5,15]},{"type":{"label":"."},"range":[15,16]},{"type":{"label":"name"},"value":"constructor","range":[16,27]},{"type":{"label":","},"range":[27,28]},{"type":{"label":"name"},"value":"Monad","range":[29,34]},{"type":{"label":")"},"range":[34,35]}]',
    visitorKeys: _powerAssertVisitorKeys
  }));
  t.is(_rec6._expr(_rec6._capt(_rec6._capt(consResult, 'arguments/0/object').value, 'arguments/0'), {
    content: 't.is(consResult.value, 42)',
    filepath: 'test/main.js',
    line: 39,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"is","range":[2,4]},"computed":false,"range":[0,4]},"arguments":[{"type":"MemberExpression","object":{"type":"Identifier","name":"consResult","range":[5,15]},"property":{"type":"Identifier","name":"value","range":[16,21]},"computed":false,"range":[5,21]},{"type":"NumericLiteral","value":42,"range":[23,25]}],"range":[0,26]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"name"},"value":"is","range":[2,4]},{"type":{"label":"("},"range":[4,5]},{"type":{"label":"name"},"value":"consResult","range":[5,15]},{"type":{"label":"."},"range":[15,16]},{"type":{"label":"name"},"value":"value","range":[16,21]},{"type":{"label":","},"range":[21,22]},{"type":{"label":"num"},"value":42,"range":[23,25]},{"type":{"label":")"},"range":[25,26]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), 42);
});

(0, _ava2.default)('basic evaluation with exception', t => {
  var _rec7 = new _powerAssertRecorder(),
      _rec8 = new _powerAssertRecorder(),
      _rec9 = new _powerAssertRecorder(),
      _rec10 = new _powerAssertRecorder(),
      _rec11 = new _powerAssertRecorder(),
      _rec12 = new _powerAssertRecorder(),
      _rec13 = new _powerAssertRecorder(),
      _rec14 = new _powerAssertRecorder(),
      _rec15 = new _powerAssertRecorder();

  const evaluate = val => {
    if (val.constructor !== Term) throw new Error('Unexpected argument');

    if (val.value.constructor === Number) return _main.MonadicException.unit(val.value);

    if (val.value.constructor === Div) {
      return evaluate(val.value.term1).then(a => evaluate(val.value.term2).then(b => b === 0 ? _main.MonadicException.raise(new Error('Division by zero')) : _main.MonadicException.unit(a / b)));
    }
  };

  const consResult = evaluate(new Term(42));
  t.is(_rec7._expr(_rec7._capt(_rec7._capt(consResult, 'arguments/0/object').constructor, 'arguments/0'), {
    content: 't.is(consResult.constructor, MonadicException)',
    filepath: 'test/main.js',
    line: 60,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"is","range":[2,4]},"computed":false,"range":[0,4]},"arguments":[{"type":"MemberExpression","object":{"type":"Identifier","name":"consResult","range":[5,15]},"property":{"type":"Identifier","name":"constructor","range":[16,27]},"computed":false,"range":[5,27]},{"type":"Identifier","name":"MonadicException","range":[29,45]}],"range":[0,46]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"name"},"value":"is","range":[2,4]},{"type":{"label":"("},"range":[4,5]},{"type":{"label":"name"},"value":"consResult","range":[5,15]},{"type":{"label":"."},"range":[15,16]},{"type":{"label":"name"},"value":"constructor","range":[16,27]},{"type":{"label":","},"range":[27,28]},{"type":{"label":"name"},"value":"MonadicException","range":[29,45]},{"type":{"label":")"},"range":[45,46]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), _rec8._expr(_rec8._capt(_main.MonadicException, 'arguments/1'), {
    content: 't.is(consResult.constructor, MonadicException)',
    filepath: 'test/main.js',
    line: 60,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"is","range":[2,4]},"computed":false,"range":[0,4]},"arguments":[{"type":"MemberExpression","object":{"type":"Identifier","name":"consResult","range":[5,15]},"property":{"type":"Identifier","name":"constructor","range":[16,27]},"computed":false,"range":[5,27]},{"type":"Identifier","name":"MonadicException","range":[29,45]}],"range":[0,46]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"name"},"value":"is","range":[2,4]},{"type":{"label":"("},"range":[4,5]},{"type":{"label":"name"},"value":"consResult","range":[5,15]},{"type":{"label":"."},"range":[15,16]},{"type":{"label":"name"},"value":"constructor","range":[16,27]},{"type":{"label":","},"range":[27,28]},{"type":{"label":"name"},"value":"MonadicException","range":[29,45]},{"type":{"label":")"},"range":[45,46]}]',
    visitorKeys: _powerAssertVisitorKeys
  }));
  t.is(_rec9._expr(_rec9._capt(_rec9._capt(_rec9._capt(consResult, 'arguments/0/object/object').value, 'arguments/0/object').value, 'arguments/0'), {
    content: 't.is(consResult.value.value, 42)',
    filepath: 'test/main.js',
    line: 61,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"is","range":[2,4]},"computed":false,"range":[0,4]},"arguments":[{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"consResult","range":[5,15]},"property":{"type":"Identifier","name":"value","range":[16,21]},"computed":false,"range":[5,21]},"property":{"type":"Identifier","name":"value","range":[22,27]},"computed":false,"range":[5,27]},{"type":"NumericLiteral","value":42,"range":[29,31]}],"range":[0,32]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"name"},"value":"is","range":[2,4]},{"type":{"label":"("},"range":[4,5]},{"type":{"label":"name"},"value":"consResult","range":[5,15]},{"type":{"label":"."},"range":[15,16]},{"type":{"label":"name"},"value":"value","range":[16,21]},{"type":{"label":"."},"range":[21,22]},{"type":{"label":"name"},"value":"value","range":[22,27]},{"type":{"label":","},"range":[27,28]},{"type":{"label":"num"},"value":42,"range":[29,31]},{"type":{"label":")"},"range":[31,32]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), 42);

  const divResult = evaluate(new Term(new Div(new Term(new Div(new Term(1972), new Term(2))), new Term(23))));
  t.is(_rec10._expr(_rec10._capt(_rec10._capt(consResult, 'arguments/0/object').constructor, 'arguments/0'), {
    content: 't.is(consResult.constructor, MonadicException)',
    filepath: 'test/main.js',
    line: 64,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"is","range":[2,4]},"computed":false,"range":[0,4]},"arguments":[{"type":"MemberExpression","object":{"type":"Identifier","name":"consResult","range":[5,15]},"property":{"type":"Identifier","name":"constructor","range":[16,27]},"computed":false,"range":[5,27]},{"type":"Identifier","name":"MonadicException","range":[29,45]}],"range":[0,46]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"name"},"value":"is","range":[2,4]},{"type":{"label":"("},"range":[4,5]},{"type":{"label":"name"},"value":"consResult","range":[5,15]},{"type":{"label":"."},"range":[15,16]},{"type":{"label":"name"},"value":"constructor","range":[16,27]},{"type":{"label":","},"range":[27,28]},{"type":{"label":"name"},"value":"MonadicException","range":[29,45]},{"type":{"label":")"},"range":[45,46]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), _rec11._expr(_rec11._capt(_main.MonadicException, 'arguments/1'), {
    content: 't.is(consResult.constructor, MonadicException)',
    filepath: 'test/main.js',
    line: 64,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"is","range":[2,4]},"computed":false,"range":[0,4]},"arguments":[{"type":"MemberExpression","object":{"type":"Identifier","name":"consResult","range":[5,15]},"property":{"type":"Identifier","name":"constructor","range":[16,27]},"computed":false,"range":[5,27]},{"type":"Identifier","name":"MonadicException","range":[29,45]}],"range":[0,46]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"name"},"value":"is","range":[2,4]},{"type":{"label":"("},"range":[4,5]},{"type":{"label":"name"},"value":"consResult","range":[5,15]},{"type":{"label":"."},"range":[15,16]},{"type":{"label":"name"},"value":"constructor","range":[16,27]},{"type":{"label":","},"range":[27,28]},{"type":{"label":"name"},"value":"MonadicException","range":[29,45]},{"type":{"label":")"},"range":[45,46]}]',
    visitorKeys: _powerAssertVisitorKeys
  }));
  t.is(_rec12._expr(_rec12._capt(_rec12._capt(_rec12._capt(consResult, 'arguments/0/object/object').value, 'arguments/0/object').value, 'arguments/0'), {
    content: 't.is(consResult.value.value, 42)',
    filepath: 'test/main.js',
    line: 65,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"is","range":[2,4]},"computed":false,"range":[0,4]},"arguments":[{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"consResult","range":[5,15]},"property":{"type":"Identifier","name":"value","range":[16,21]},"computed":false,"range":[5,21]},"property":{"type":"Identifier","name":"value","range":[22,27]},"computed":false,"range":[5,27]},{"type":"NumericLiteral","value":42,"range":[29,31]}],"range":[0,32]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"name"},"value":"is","range":[2,4]},{"type":{"label":"("},"range":[4,5]},{"type":{"label":"name"},"value":"consResult","range":[5,15]},{"type":{"label":"."},"range":[15,16]},{"type":{"label":"name"},"value":"value","range":[16,21]},{"type":{"label":"."},"range":[21,22]},{"type":{"label":"name"},"value":"value","range":[22,27]},{"type":{"label":","},"range":[27,28]},{"type":{"label":"num"},"value":42,"range":[29,31]},{"type":{"label":")"},"range":[31,32]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), 42);

  t.throws(_avaThrowsHelper(function () {
    return evaluate(new Term(new Div(new Term(10), new Term(0))));
  }, {
    line: 67,
    column: 11,
    source: 'evaluate(new Term(new Div(new Term(10), new Term(0))))',
    filename: '/home/agustin/projects/npm-monads/test/main.js'
  }));
  t.is(_rec13._expr(_rec13._capt(_rec13._capt(errorResult, 'arguments/0/object').constructor, 'arguments/0'), {
    content: 't.is(errorResult.constructor, MonadicException)',
    filepath: 'test/main.js',
    line: 68,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"is","range":[2,4]},"computed":false,"range":[0,4]},"arguments":[{"type":"MemberExpression","object":{"type":"Identifier","name":"errorResult","range":[5,16]},"property":{"type":"Identifier","name":"constructor","range":[17,28]},"computed":false,"range":[5,28]},{"type":"Identifier","name":"MonadicException","range":[30,46]}],"range":[0,47]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"name"},"value":"is","range":[2,4]},{"type":{"label":"("},"range":[4,5]},{"type":{"label":"name"},"value":"errorResult","range":[5,16]},{"type":{"label":"."},"range":[16,17]},{"type":{"label":"name"},"value":"constructor","range":[17,28]},{"type":{"label":","},"range":[28,29]},{"type":{"label":"name"},"value":"MonadicException","range":[30,46]},{"type":{"label":")"},"range":[46,47]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), _rec14._expr(_rec14._capt(_main.MonadicException, 'arguments/1'), {
    content: 't.is(errorResult.constructor, MonadicException)',
    filepath: 'test/main.js',
    line: 68,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"is","range":[2,4]},"computed":false,"range":[0,4]},"arguments":[{"type":"MemberExpression","object":{"type":"Identifier","name":"errorResult","range":[5,16]},"property":{"type":"Identifier","name":"constructor","range":[17,28]},"computed":false,"range":[5,28]},{"type":"Identifier","name":"MonadicException","range":[30,46]}],"range":[0,47]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"name"},"value":"is","range":[2,4]},{"type":{"label":"("},"range":[4,5]},{"type":{"label":"name"},"value":"errorResult","range":[5,16]},{"type":{"label":"."},"range":[16,17]},{"type":{"label":"name"},"value":"constructor","range":[17,28]},{"type":{"label":","},"range":[28,29]},{"type":{"label":"name"},"value":"MonadicException","range":[30,46]},{"type":{"label":")"},"range":[46,47]}]',
    visitorKeys: _powerAssertVisitorKeys
  }));
  t.is(_rec15._expr(_rec15._capt(_rec15._capt(_rec15._capt(errorResult, 'arguments/0/object/object').value, 'arguments/0/object').value, 'arguments/0'), {
    content: 't.is(errorResult.value.value, null)',
    filepath: 'test/main.js',
    line: 69,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"is","range":[2,4]},"computed":false,"range":[0,4]},"arguments":[{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"errorResult","range":[5,16]},"property":{"type":"Identifier","name":"value","range":[17,22]},"computed":false,"range":[5,22]},"property":{"type":"Identifier","name":"value","range":[23,28]},"computed":false,"range":[5,28]},{"type":"NullLiteral","range":[30,34]}],"range":[0,35]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"name"},"value":"is","range":[2,4]},{"type":{"label":"("},"range":[4,5]},{"type":{"label":"name"},"value":"errorResult","range":[5,16]},{"type":{"label":"."},"range":[16,17]},{"type":{"label":"name"},"value":"value","range":[17,22]},{"type":{"label":"."},"range":[22,23]},{"type":{"label":"name"},"value":"value","range":[23,28]},{"type":{"label":","},"range":[28,29]},{"type":{"label":"null"},"value":"null","range":[30,34]},{"type":{"label":")"},"range":[34,35]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), null);
  console.log(errorResult.value.error);
});
//# sourceMappingURL=../node_modules/.cache/ava/8cdd11b2f228e41a15c75a0c51364d03.js.map