{"version":3,"sources":["main.js"],"names":["t","Term","constructor","value","Div","term1","term2","evaluate","val","Error","Number","unit","then","a","b","consResult","console","log","is","divResult"],"mappings":";;;;;AAAA;;;;AAEA;;;;;;AAEA,mBAAK,kBAAL,EAAyBA,KAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAC5B,QAAMC,IAAN,CAAW;AACTC,gBAAYC,KAAZ,EAAmB;AACjB,WAAKA,KAAL,GAAaA,KAAb;AACD;AAHQ;;AAMX,QAAMC,GAAN,CAAU;AACRF,gBAAYG,KAAZ,EAAmBC,KAAnB,EAA0B;AACxB,WAAKD,KAAL,GAAaA,KAAb;AACA,WAAKC,KAAL,GAAaA,KAAb;AACD;AAJO;;AAOV,QAAMC,WAAYC,GAAD,IAAS;AACxB,QAAIA,IAAIN,WAAJ,IAAmBD,IAAvB,EAA6B,MAAM,IAAIQ,KAAJ,CAAU,qBAAV,CAAN;;AAE7B,QAAID,IAAIL,KAAJ,CAAUD,WAAV,KAA0BQ,MAA9B,EAAsC,OAAO,eAAMC,IAAN,CAAWH,IAAIL,KAAf,CAAP;;AAEtC,QAAIK,IAAIL,KAAJ,CAAUD,WAAV,KAA0BE,GAA9B,EAAmC;AACjC,aAAOG,SAASC,IAAIL,KAAJ,CAAUE,KAAnB,EAA0BO,IAA1B,CAA+BC,KACpCN,SAASC,IAAIL,KAAJ,CAAUG,KAAnB,EAA0BM,IAA1B,CAA+BE,KAC7B,eAAMH,IAAN,CAAWE,IAAEC,CAAb,CADF,CADK,CAAP;AAKD;AACF,GAZD;;AAcA,QAAMC,aAAaR,SAAS,IAAIN,IAAJ,CAAS,EAAT,CAAT,CAAnB;AACAe,UAAQC,GAAR,CAAYF,UAAZ;AACAf,IAAEkB,EAAF,uBAAK,6CAAWhB,WAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACAF,IAAEkB,EAAF,yBAAK,8CAAWf,KAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAuB,EAAvB;;AAEA,QAAMgB,YAAYZ,SAAS,IAAIN,IAAJ,CAASG,IAAIA,IAAI,IAAJ,EAAU,CAAV,CAAJ,EAAkB,EAAlB,CAAT,CAAT,CAAlB;AACAJ,IAAEkB,EAAF,yBAAK,8CAAWhB,WAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACAF,IAAEkB,EAAF,yBAAK,8CAAWf,KAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAuB,EAAvB;AACD,CApCD","file":"main.js","sourcesContent":["import test from 'ava'\n\nimport Monad from '../lib/main'\n\ntest('basic evaluation', t => {\n  class Term {\n    constructor(value) {\n      this.value = value\n    }\n  }\n\n  class Div {\n    constructor(term1, term2) {\n      this.term1 = term1\n      this.term2 = term2\n    }\n  }\n\n  const evaluate = (val) => {\n    if (val.constructor != Term) throw new Error('Unexpected argument')\n\n    if (val.value.constructor === Number) return Monad.unit(val.value)\n\n    if (val.value.constructor === Div) {\n      return evaluate(val.value.term1).then(a =>\n        evaluate(val.value.term2).then(b =>\n          Monad.unit(a/b)\n        )\n      )\n    }\n  }\n\n  const consResult = evaluate(new Term(42))\n  console.log(consResult)\n  t.is(consResult.constructor, Monad)\n  t.is(consResult.value, 42)\n\n  const divResult = evaluate(new Term(Div(Div(1972, 2), 23)))\n  t.is(consResult.constructor, Monad)\n  t.is(consResult.value, 42)\n})\n"]}